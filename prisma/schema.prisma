generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           String?         @default("FREE")
  hashedPassword String?
  Provider       String?
  accounts       Account[]
  Authenticator  Authenticator[]
  Note           Note[]
  sessions       Session[]
  apiLimit Int @default(0)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Note {
  id         String      @id @default(cuid())
  email      String
  title      String
  content    String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  flashcards Flashcard[]
  user       User        @relation(fields: [email], references: [email], onDelete: Cascade)
  quizzes    Quiz[]

  @@unique([email, title])
}

model Flashcard {
  id         String   @id @default(cuid())
  question   String
  answer     String
  difficulty String
  noteId     String
  note       Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Quiz {
  id            String   @id @default(cuid())
  question      String
  correctAnswer String
  answers       String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  noteId        String
  note          Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

